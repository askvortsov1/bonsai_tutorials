==== /src/app.ml ====
-1,4 +1,11
  open! Core
  open! Bonsai_web
  
-|let component = Computation.return (Vdom.Node.text "Hello world!")
+|let rows = 20
+|let cols = 20
+|
+|let component =
+|  let snake = Snake.spawn_random ~rows ~cols ~color:"green" in
+|  let apple = Apple.spawn_random ~rows ~cols ~invalid_pos:(Snake.list_of_t snake) in
+|  Board.component ~rows ~cols (Value.return snake) (Value.return apple)
+|;;

==== /src/apple.ml ====
-1,0 +1,17
+|open! Core
+|open! Bonsai_web
+|
+|type t = Position.t option [@@deriving sexp, equal]
+|
+|let list_of_t t =
+|  match t with
+|  | Some pos -> [ pos ]
+|  | None -> []
+|;;
+|
+|let spawn_random ~rows ~cols ~invalid_pos = Position.random_pos ~rows ~cols ~invalid_pos
+|let is_eatten a s = Option.mem a (Snake.head s) ~equal:Position.equal
+|
+|let cell_background a pos =
+|  if Option.mem a pos ~equal:Position.equal then Some "red" else None
+|;;

==== /src/apple.mli ====
-1,0 +1,21
+|open! Core
+|open! Bonsai_web
+|
+|(** A [t] represents an apple which may or may not be placed somewhere
+|    on the grid. *)
+|type t = Position.t option [@@deriving sexp]
+|
+|(** [list_of_t t] returns a list of positions occupied by the apple. *)
+|val list_of_t : t -> Position.t list
+|
+|(** [spawn_random ~rows ~cols ~invalid_pos] creates an apple placed randomly
+|   on a rows*cols grid; excluding cells in ~invalid_pos. *)
+|val spawn_random : rows:int -> cols:int -> invalid_pos:Position.t list -> t
+|
+|(** [is_eatten t s] returns true iff the apple is at the same position as the given
+|    snake's head.  *)
+|val is_eatten : t -> Snake.t -> bool
+|
+|(** [cell_background t pos] computes the background of a cell at [pos], if
+|    that cell is occupied by t. Otherwise, it returns [None] *)
+|val cell_background : t -> Position.t -> string option

==== /src/board.ml ====
-1,0 +1,86
+|open! Core
+|open! Bonsai_web
+|
+|module Style =
+|[%css.raw
+|{|
+|.grid {
+|  width: 600px;
+|  display: grid;
+|  grid-template-rows: repeat(var(--grid-rows), 1fr);
+|  grid-template-columns: repeat(var(--grid-cols), 1fr);
+|}
+|
+|.grid_cell {
+|  border: 2px solid gray;
+|  /* Hack to make the cells square */
+|  padding-bottom: 100%;
+|  height: 0;
+|}
+||}]
+|
+|let view_board rows cols cell_bg_driver =
+|  let cells =
+|    List.init rows ~f:(fun row ->
+|      List.init cols ~f:(fun col ->
+|        let pos = { Position.row; col } in
+|        let background_str = cell_bg_driver pos in
+|        let css = Css_gen.create ~field:"background" ~value:background_str in
+|        Vdom.(
+|          Node.div
+|            ~attr:(Attr.many [ Attr.style css; Attr.classes [ Style.grid_cell ] ])
+|            [])))
+|    |> List.concat
+|  in
+|  Vdom.(Node.div ~attr:(Attr.class_ Style.grid) cells)
+|;;
+|
+|let view_instructions = Vdom.(Node.p [ Node.text "Click anywhere to reset." ])
+|
+|let merge_cell_bg_drivers ~snakes ~apples =
+|  let drivers =
+|    List.join
+|      [ List.map snakes ~f:Snake.cell_background
+|      ; List.map apples ~f:Apple.cell_background
+|      ]
+|  in
+|  fun pos ->
+|    match List.find_map drivers ~f:(fun driver -> driver pos) with
+|    | Some x -> x
+|    | None -> "white"
+|;;
+|
+|let set_style_property key value =
+|  let open Js_of_ocaml in
+|  let priority = Js.undefined in
+|  let res =
+|    Dom_html.document##.documentElement##.style##setProperty
+|      (Js.string key)
+|      (Js.string value)
+|      priority
+|  in
+|  ignore res
+|;;
+|
+|let component ~rows ~cols snake apple =
+|  let open Bonsai.Let_syntax in
+|  (* TODO: use `Attr.css_var` instead. *)
+|  let on_activate =
+|    Ui_effect.of_sync_fun
+|      (fun () ->
+|        set_style_property "--grid-rows" (Int.to_string rows);
+|        set_style_property "--grid-cols" (Int.to_string cols))
+|      ()
+|    |> Value.return
+|  in
+|  let%sub () = Bonsai.Edge.lifecycle ~on_activate () in
+|  let%arr snake = snake
+|  and apple = apple in
+|  let cell_bg_driver = merge_cell_bg_drivers ~snakes:[ snake ] ~apples:[ apple ] in
+|  Vdom.(
+|    Node.div
+|      [ Node.h1 [ Node.text "Snake Game" ]
+|      ; view_instructions
+|      ; view_board rows cols cell_bg_driver
+|      ])
+|;;

==== /src/board.mli ====
-1,0 +1,9
+|open! Core
+|open! Bonsai_web
+|
+|val component
+|  :  rows:int
+|  -> cols:int
+|  -> Snake.t Value.t
+|  -> Apple.t Value.t
+|  -> Vdom.Node.t Computation.t

==== /src/direction.ml ====
-1,0 +1,8
+|open! Core
+|
+|type t =
+|  | Up
+|  | Down
+|  | Right
+|  | Left
+|[@@deriving sexp, equal]

==== /src/direction.mli ====
-1,0 +1,9
+|open! Core
+|
+|(** A [t] represents a direction on the playing board. *)
+|type t =
+|  | Up
+|  | Down
+|  | Right
+|  | Left
+|[@@deriving sexp, equal]

==== /src/position.ml ====
-1,0 +1,28
+|open! Core
+|
+|type t =
+|  { col : int
+|  ; row : int
+|  }
+|[@@deriving equal, sexp]
+|
+|let step { row; col } dir =
+|  match dir with
+|  | Direction.Left -> { row; col = col - 1 }
+|  | Right -> { row; col = col + 1 }
+|  | Up -> { row = row - 1; col }
+|  | Down -> { row = row + 1; col }
+|;;
+|
+|let random_pos ~rows ~cols ~invalid_pos =
+|  let valid_pos =
+|    List.init rows ~f:(fun row -> List.init cols ~f:(fun col -> { row; col }))
+|    |> List.concat
+|    |> List.filter ~f:(fun x -> not (List.mem ~equal invalid_pos x))
+|  in
+|  if List.is_empty valid_pos
+|  then None
+|  else (
+|    let n = Random.int (List.length valid_pos) in
+|    List.nth valid_pos n)
+|;;

==== /src/position.mli ====
-1,0 +1,17
+|open! Core
+|
+|(** A [t] represents a square on the playing area, identified by its row and
+|    column. *)
+|type t =
+|  { col : int
+|  ; row : int
+|  }
+|[@@deriving equal, sexp]
+|
+|(** [step t dir] returns the next position after taking a step in
+|    [dir] from [t]. *)
+|val step : t -> Direction.t -> t
+|
+|(** [random_pos ~rows ~cols ~invalid_pos] returns a random [t] with
+|    [t.row < rows] and [t.col < cols], which is not in [invalid_pos]. *)
+|val random_pos : rows:int -> cols:int -> invalid_pos:t list -> t option

==== /src/snake.ml ====
-1,0 +1,47
+|open! Core
+|
+|type t =
+|  { pos : Position.t Deque.t
+|  ; left_to_grow : int
+|  ; color : string
+|  }
+|[@@deriving sexp]
+|
+|let equal a b =
+|  List.equal Position.equal (Deque.to_list a.pos) (Deque.to_list b.pos)
+|  && Int.equal a.left_to_grow b.left_to_grow
+|;;
+|
+|let list_of_t s = Deque.to_list s.pos
+|let head s = Deque.peek_front_exn s.pos
+|
+|let spawn_random ~rows ~cols ~color =
+|  let head = Position.random_pos ~rows ~cols ~invalid_pos:[] in
+|  let head_exn = Option.value_exn head in
+|  { pos = Deque.of_array [| head_exn |]; left_to_grow = 0; color }
+|;;
+|
+|let move s dir =
+|  let new_head = Position.step (head s) dir in
+|  Deque.enqueue_front s.pos new_head;
+|  if Int.equal s.left_to_grow 0 then ignore (Deque.dequeue_back s.pos : Position.t option);
+|  let left_to_grow = Int.max 0 (s.left_to_grow - 1) in
+|  { s with left_to_grow }
+|;;
+|
+|let grow_eventually ~by s = { s with left_to_grow = s.left_to_grow + by }
+|
+|let is_out_of_bounds ~rows ~cols s =
+|  let { Position.row; col } = head s in
+|  row < 0 || row >= rows || col < 0 || col >= cols
+|;;
+|
+|let is_eatting_self s =
+|  match list_of_t s with
+|  | head :: tail -> List.mem tail head ~equal:Position.equal
+|  | [] -> false (* This should never happen. *)
+|;;
+|
+|let cell_background s pos =
+|  if List.mem (list_of_t s) pos ~equal:Position.equal then Some s.color else None
+|;;

==== /src/snake.mli ====
-1,0 +1,36
+|open! Core
+|
+|(** A [t] represents a snake, which keeps track of how much it
+|    has left to grow. *)
+|type t [@@deriving sexp, equal]
+|
+|(** [list_of_t t] returns a list of [Position.t]s occupied by the snake. *)
+|val list_of_t : t -> Position.t list
+|
+|(** [head t] returns the [Position.t] occupied by the head (first element) of the snake. *)
+|val head : t -> Position.t
+|
+|(** [is_eatting_self t] returns true iff the snake's head is overlapping with any of
+|    the snake's body segments.  *)
+|val is_eatting_self : t -> bool
+|
+|(** [is_out_of_bounds ~rows ~cols t] returns true iff the snake's head has gone
+|    outside of the [rows]*[cols] grid. *)
+|val is_out_of_bounds : rows:int -> cols:int -> t -> bool
+|
+|(** [spawn_random ~rows ~cols ~invalid_pos] creates a length-1 snake
+|    placed randomly on the left half ([col < cols/2]) of a rows*cols grid.
+|    The provided color will be used in calls to [cell_background]. *)
+|val spawn_random : rows:int -> cols:int -> color:string -> t
+|
+|(** [move t dir] moves a snake 1 step in [dir]. It may or may not grow,
+|    depending on its internal state. *)
+|val move : t -> Direction.t -> t
+|
+|(** [grow_eventually ~by] updates a snake's internal state to grow 1 cell
+|    for the next [by] times [move] is called. *)
+|val grow_eventually : by:int -> t -> t
+|
+|(** [cell_background t pos] computes the background of a cell at [pos], if
+|    that cell is occupied by t. Otherwise, it returns [None] *)
+|val cell_background : t -> Position.t -> string option
