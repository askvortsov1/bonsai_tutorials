==== /src/app.ml ====
-1,4 +1,19
  open! Core
  open! Bonsai_web
  
-|let component = Computation.return (Vdom.Node.text "Hello world!")
+|let rows = 20
+|let cols = 20
+|
+|let component =
+|  let snake = Snake.spawn_random ~rows ~cols in
+|  let apple = Apple.spawn_random ~rows ~cols ~invalid_pos:(Snake.set_of_t snake) in
+|  let score = 100 in
+|  let player_status = Player_status.Playing in
+|  Board.component
+|    ~rows
+|    ~cols
+|    (Value.return snake)
+|    (Value.return score)
+|    (Value.return player_status)
+|    (Value.return apple)
+|;;

==== /src/apple.ml ====
-1,0 +1,15
+|open! Core
+|open! Bonsai_web
+|
+|type t = Position.t option [@@deriving sexp, equal]
+|
+|let set_of_t t =
+|  let module Pos_set = Set.Make (Position) in
+|  match t with
+|  | Some pos -> Pos_set.singleton pos
+|  | None -> Pos_set.empty
+|;;
+|
+|let spawn_random ~rows ~cols ~invalid_pos =
+|  Position.random_pos ~rows ~cols ~invalid_pos:(Set.to_list invalid_pos)
+|;;

==== /src/apple.mli ====
-1,0 +1,7
+|open! Core
+|open! Bonsai_web
+|
+|type t = Position.t option [@@deriving sexp]
+|
+|val set_of_t : t -> Set.Make(Position).t
+|val spawn_random : rows:int -> cols:int -> invalid_pos:Set.Make(Position).t -> t

==== /src/board.ml ====
-1,0 +1,124
+|open! Core
+|open! Bonsai_web
+|
+|module Style =
+|[%css.raw
+|{|
+|.grid {
+|  width: 600px;
+|  display: grid;
+|  grid-template-rows: repeat(var(--grid-rows), 1fr);
+|  grid-template-columns: repeat(var(--grid-cols), 1fr);
+|}
+|
+|.grid_cell {
+|  border: 2px solid gray;
+|  /* Hack to make the cells square */
+|  padding-bottom: 100%;
+|  height: 0;
+|}
+|
+|.snake_cell {
+|  background-color: green;
+|}
+|
+|.apple_cell {
+|  background-color: red;
+|}
+|
+|.empty_cell {
+|  background-color: white;
+|}
+||}]
+|
+|module Cell = struct
+|  type t =
+|    | Snake
+|    | Apple
+|    | Empty
+|
+|  let t_of_pos ~snake ~apple =
+|    let snake_cells = Snake.set_of_t snake in
+|    let apple_cells = Apple.set_of_t apple in
+|    fun pos ->
+|      if Set.mem snake_cells pos
+|      then Snake
+|      else if Set.mem apple_cells pos
+|      then Apple
+|      else Empty
+|  ;;
+|
+|  let classname_of_t = function
+|    | Snake -> Style.snake_cell
+|    | Apple -> Style.apple_cell
+|    | Empty -> Style.empty_cell
+|  ;;
+|end
+|
+|let view_board rows cols snake apple =
+|  let cell_t_of_pos = Cell.t_of_pos ~snake ~apple in
+|  let cells =
+|    List.init rows ~f:(fun row ->
+|      List.init cols ~f:(fun col ->
+|        let pos = { Position.row; col } in
+|        let class_ = Cell.classname_of_t (cell_t_of_pos pos) in
+|        Vdom.(Node.div ~attr:(Attr.classes [ Style.grid_cell; class_ ]) [])))
+|    |> List.concat
+|  in
+|  Vdom.(Node.div ~attr:(Attr.class_ Style.grid) cells)
+|;;
+|
+|let view_instructions = Vdom.(Node.p [ Node.text "Click anywhere to start or reset." ])
+|
+|let view_score_status score status =
+|  let view_status =
+|    match status with
+|    | Player_status.Playing -> Vdom.Node.none
+|    | Inactive reason ->
+|      let message_text =
+|        match reason with
+|        | Not_started -> "Click to start!"
+|        | Out_of_bounds -> "Game over... Out of bounds!"
+|        | Ate_self -> "Game over... Ate self!"
+|      in
+|      Vdom.(Node.p [ Node.text message_text ])
+|  in
+|  Vdom.(Node.div [ Node.p [ Node.textf "Score: %d" score ]; view_status ])
+|;;
+|
+|let set_style_property key value =
+|  let open Js_of_ocaml in
+|  let priority = Js.undefined in
+|  let res =
+|    Dom_html.document##.documentElement##.style##setProperty
+|      (Js.string key)
+|      (Js.string value)
+|      priority
+|  in
+|  ignore res
+|;;
+|
+|let component ~rows ~cols snake score player_status apple =
+|  let open Bonsai.Let_syntax in
+|  (* TODO: use `Attr.css_var` instead. *)
+|  let on_activate =
+|    Ui_effect.of_sync_fun
+|      (fun () ->
+|        set_style_property "--grid-rows" (Int.to_string rows);
+|        set_style_property "--grid-cols" (Int.to_string cols))
+|      ()
+|    |> Value.return
+|  in
+|  let%sub () = Bonsai.Edge.lifecycle ~on_activate () in
+|  let%arr score = score
+|  and snake = snake
+|  and status = player_status
+|  and apple = apple in
+|  Vdom.(
+|    Node.div
+|      [ Node.h1 [ Node.text "Snake Game" ]
+|      ; view_instructions
+|      ; view_score_status score status
+|      ; view_board rows cols snake apple
+|      ])
+|;;

==== /src/board.mli ====
-1,0 +1,11
+|open! Core
+|open! Bonsai_web
+|
+|val component
+|  :  rows:int
+|  -> cols:int
+|  -> Snake.t Value.t
+|  -> int Value.t
+|  -> Player_status.t Value.t
+|  -> Apple.t Value.t
+|  -> Vdom.Node.t Computation.t

==== /src/direction.ml ====
-1,0 +1,16
+|open! Core
+|
+|type t =
+|  | Up
+|  | Down
+|  | Right
+|  | Left
+|[@@deriving sexp, equal]
+|
+|let next_position t { Position.row; col } : Position.t =
+|  match t with
+|  | Left -> { row; col = col - 1 }
+|  | Right -> { row; col = col + 1 }
+|  | Up -> { row = row - 1; col }
+|  | Down -> { row = row + 1; col }
+|;;

==== /src/direction.mli ====
-1,0 +1,11
+|open! Core
+|
+|(** A [t] represents a direction on the playing board. *)
+|type t =
+|  | Up
+|  | Down
+|  | Right
+|  | Left
+|[@@deriving sexp, equal]
+|
+|val next_position : t -> Position.t -> Position.t

==== /src/player_status.ml ====
-1,0 +1,14
+|open! Core
+|
+|module Inactive_reason = struct
+|  type t =
+|    | Not_started
+|    | Ate_self
+|    | Out_of_bounds
+|  [@@deriving sexp, equal]
+|end
+|
+|type t =
+|  | Playing
+|  | Inactive of Inactive_reason.t
+|[@@deriving sexp, equal]

==== /src/player_status.mli ====
-1,0 +1,14
+|open! Core
+|
+|module Inactive_reason : sig
+|  type t =
+|    | Not_started
+|    | Ate_self
+|    | Out_of_bounds
+|  [@@deriving sexp, equal]
+|end
+|
+|type t =
+|  | Playing
+|  | Inactive of Inactive_reason.t
+|[@@deriving sexp, equal]

==== /src/position.ml ====
-1,0 +1,26
+|open! Core
+|
+|module S = struct
+|  type t =
+|    { col : int
+|    ; row : int
+|    }
+|  [@@deriving equal, compare, sexp]
+|end
+|
+|module Pos_set = Set.Make (S)
+|include S
+|
+|let random_pos ~rows ~cols ~invalid_pos =
+|  let invalid_pos_set = Pos_set.of_list invalid_pos in
+|  let valid_pos =
+|    List.init rows ~f:(fun row -> List.init cols ~f:(fun col -> { row; col }))
+|    |> List.concat
+|    |> List.filter ~f:(fun x -> not (Set.mem invalid_pos_set x))
+|  in
+|  if List.is_empty valid_pos
+|  then None
+|  else (
+|    let n = Random.int (List.length valid_pos) in
+|    List.nth valid_pos n)
+|;;

==== /src/position.mli ====
-1,0 +1,11
+|open! Core
+|
+|(** A [t] represents a square on the playing area, identified by its row and
+|    column. *)
+|type t =
+|  { col : int
+|  ; row : int
+|  }
+|[@@deriving equal, compare, sexp]
+|
+|val random_pos : rows:int -> cols:int -> invalid_pos:t list -> t option

==== /src/snake.ml ====
-1,0 +1,47
+|open! Core
+|
+|type t =
+|  { pos : Position.t Deque.t
+|  ; left_to_grow : int
+|  }
+|[@@deriving sexp]
+|
+|let equal a b =
+|  List.equal Position.equal (Deque.to_list a.pos) (Deque.to_list b.pos)
+|  && Int.equal a.left_to_grow b.left_to_grow
+|;;
+|
+|let set_of_t x =
+|  let module Pos_set = Set.Make (Position) in
+|  x.pos |> Deque.to_list |> Pos_set.of_list
+|;;
+|
+|let head s = Deque.peek_front_exn s.pos
+|
+|let spawn_random ~rows ~cols =
+|  let head = Position.random_pos ~rows ~cols ~invalid_pos:[] in
+|  let head_exn = Option.value_exn head in
+|  { pos = Deque.of_array [| head_exn |]; left_to_grow = 0 }
+|;;
+|
+|let move s dir =
+|  let new_head = Direction.next_position dir (head s) in
+|  Deque.enqueue_front s.pos new_head;
+|  if Int.equal s.left_to_grow 0 then ignore (Deque.dequeue_back s.pos : Position.t option);
+|  let left_to_grow = Int.max 0 (s.left_to_grow - 1) in
+|  { s with left_to_grow }
+|;;
+|
+|let grow_eventually ~by s = { s with left_to_grow = s.left_to_grow + by }
+|
+|let is_out_of_bounds ~rows ~cols s =
+|  let { Position.row; col } = head s in
+|  row < 0 || row >= rows || col < 0 || col >= cols
+|;;
+|
+|let is_eatting_self s =
+|  let module Pos_set = Set.Make (Position) in
+|  match Deque.to_list s.pos with
+|  | head :: tail -> Set.mem (Pos_set.of_list tail) head
+|  | [] -> false (* This should never happen. *)
+|;;

==== /src/snake.mli ====
-1,0 +1,11
+|open! Core
+|
+|type t [@@deriving sexp, equal]
+|
+|val set_of_t : t -> Set.Make(Position).t
+|val head : t -> Position.t
+|val is_eatting_self : t -> bool
+|val is_out_of_bounds : rows:int -> cols:int -> t -> bool
+|val spawn_random : rows:int -> cols:int -> t
+|val move : t -> Direction.t -> t
+|val grow_eventually : by:int -> t -> t
